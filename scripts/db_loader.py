import os
import time
import logging
import psycopg2
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/db_loader.log'),  # –õ–æ–≥-—Ñ–∞–π–ª –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    ]
)

class DBLoader:
    def __init__(self):
        self.data_dir = "/data"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∫—É–¥–∞ Whisper —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        self.processed_dir = os.path.join(self.data_dir, "processed")
        os.makedirs(self.processed_dir, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        self.db_params = {
            'host': os.getenv('DB_HOST', 'postgres'),
            'database': os.getenv('DB_NAME', 'whisper_db'),
            'user': os.getenv('DB_USER', 'whisper_user'),
            'password': os.getenv('DB_PASSWORD'),
            'port': os.getenv('DB_PORT', '5432')
        }

        self.connection = None
        self.connect()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        logging.info("DBLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    def connect(self, max_retries=5, retry_delay=5):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                self.connection = psycopg2.connect(**self.db_params)
                self.connection.autocommit = False  # –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
                return True
            except Exception as e:
                logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: {e}")
                time.sleep(retry_delay)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

        logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")
        return False

    def parse_filename(self, filename):
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è_–ò–º—è_–û—Ç—á–µ—Å—Ç–≤–æ_–ì–ì–ì–ì-–ú–ú-–î–î_—Ç–µ–ª–µ—Ñ–æ–Ω.txt
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not filename.endswith('.txt'):
                return None

            base_name = filename[:-4]  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .txt
            parts = base_name.split('_')

            if len(parts) < 5:
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –¥–∞—Ç—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞)
            phone_number = parts[-1]
            date_str = parts[-2]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
            try:
                call_date = datetime.strptime(date_str, '%Y-%m-%d').date()
            except ValueError:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")

            # –û—Å—Ç–∞–ª—å–Ω–æ–µ - –§–ò–û (–ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
            last_name = parts[0]
            first_name = parts[1]
            middle_name = '_'.join(parts[2:-2]) if len(parts) > 5 else None

            return {
                'last_name': last_name,
                'first_name': first_name,
                'middle_name': middle_name,
                'call_date': call_date,
                'phone_number': phone_number
            }

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {filename}: {e}")
            return None

    def check_duplicate(self, filename):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –ë–î"""
        try:
            check_query = "SELECT id FROM transcriptions WHERE file_name = %s"
            with self.connection.cursor() as cursor:
                cursor.execute(check_query, (filename,))
                return cursor.fetchone() is not None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ {filename}: {e}")
            return False

    def process_file(self, file_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: —á—Ç–µ–Ω–∏–µ, –ø–∞—Ä—Å–∏–Ω–≥, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
        try:
            filename = os.path.basename(file_path)
            logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {filename}")

            # üîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –ë–î
            if self.check_duplicate(filename):
                logging.warning(f"–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: {filename}")
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ processed –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
                processed_path = os.path.join(self.processed_dir, filename)
                os.rename(file_path, processed_path)
                logging.info(f"–î—É–±–ª–∏–∫–∞—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω: {filename} -> {processed_path}")
                return False

            # –ü–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            file_info = self.parse_filename(filename)
            if not file_info:
                return False

            # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read().strip()

            if not content:
                logging.warning(f"–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª: {filename}")
                return False

            # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            # ON CONFLICT –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            query = """
                INSERT INTO transcriptions
                (last_name, first_name, middle_name, call_date, phone_number, transcription_text, file_name)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (file_name) DO UPDATE SET
                    transcription_text = EXCLUDED.transcription_text,
                    updated_at = CURRENT_TIMESTAMP
            """

            with self.connection.cursor() as cursor:
                cursor.execute(query, (
                    file_info['last_name'],
                    file_info['first_name'],
                    file_info['middle_name'],
                    file_info['call_date'],
                    file_info['phone_number'],
                    content,
                    filename
                ))
                self.connection.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            processed_path = os.path.join(self.processed_dir, filename)
            os.rename(file_path, processed_path)

            logging.info(f"–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {filename} -> {processed_path}")
            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
            if self.connection:
                self.connection.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return False

    def monitor_directory(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        logging.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.data_dir}")

        while True:
            try:
                # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                files = []
                for item in os.listdir(self.data_dir):
                    item_path = os.path.join(self.data_dir, item)
                    if os.path.isfile(item_path) and item.endswith('.txt'):
                        files.append(item)

                if files:
                    logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files)}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                for file in files:
                    file_path = os.path.join(self.data_dir, file)
                    self.process_file(file_path)

                time.sleep(10)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

if __name__ == "__main__":
    loader = DBLoader()
    loader.monitor_directory()
